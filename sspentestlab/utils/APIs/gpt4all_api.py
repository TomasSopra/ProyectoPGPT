import dataclasses
import os
import re
import time
from typing import Any, Dict, List, Tuple

import loguru
import openai
import tiktoken
from gpt4all import GPT4All
from tenacity import *

from sspentestlab.config.chat_config import GPT4ALLConfig
from sspentestlab.utils.llm_api import LLMAPI

logger = loguru.logger
logger.remove()
# logger.add(level="WARNING", sink="logs/chatgpt.log")


@dataclasses.dataclass
class Message:
    ask_id: str = None
    ask: dict = None
    answer: dict = None
    answer_id: str = None
    request_start_timestamp: float = None
    request_end_timestamp: float = None
    time_escaped: float = None


@dataclasses.dataclass
class Conversation:
    conversation_id: str = None
    message_list: List[Message] = dataclasses.field(default_factory=list)

    def __hash__(self):
        return hash(self.conversation_id)

    def __eq__(self, other):
        if not isinstance(other, Conversation):
            return False
        return self.conversation_id == other.conversation_id


class GPT4ALLAPI(LLMAPI):
    def __init__(self, config_class, use_langfuse_logging=False):
        self.name = str(config_class.model)
        self.history_length = (2) # maintain 2 messages in the history due to gpt4all limitation.
        self.conversation_dict: Dict[str, Conversation] = {}
        self.model = GPT4All(config_class.model)



    def _chat_completion_fallback(self, history: List) -> str:
        """As a fallback, only complete the last message."""
        
        response = self.model.generate(prompt=history[-1], top_k=self.history_length)
        return response



    def _chat_completion(self, history: List) -> str:
        try:
            with self.model.chat_session():
                latest_message = history[-1]["content"]
                response = self.model.generate(
                    prompt=latest_message, top_k=self.history_length
                )
                return response
        except Exception as e:
            logger.error(e)
            return self._chat_completion_fallback(history)